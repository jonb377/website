// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/user.proto

package go_micro_api_user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*Empty, error)
	GetVerifier(ctx context.Context, in *VerifierRequest, opts ...client.CallOption) (*VerifierResponse, error)
	RegisterDevice(ctx context.Context, in *Empty, opts ...client.CallOption) (*RegisterDeviceResponse, error)
	GetAccessKey(ctx context.Context, in *Empty, opts ...client.CallOption) (*AccessKeyResponse, error)
	Logout(ctx context.Context, in *Empty, opts ...client.CallOption) (*LogoutResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.api.user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "User.Register", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetVerifier(ctx context.Context, in *VerifierRequest, opts ...client.CallOption) (*VerifierResponse, error) {
	req := c.c.NewRequest(c.name, "User.GetVerifier", in)
	out := new(VerifierResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RegisterDevice(ctx context.Context, in *Empty, opts ...client.CallOption) (*RegisterDeviceResponse, error) {
	req := c.c.NewRequest(c.name, "User.RegisterDevice", in)
	out := new(RegisterDeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetAccessKey(ctx context.Context, in *Empty, opts ...client.CallOption) (*AccessKeyResponse, error) {
	req := c.c.NewRequest(c.name, "User.GetAccessKey", in)
	out := new(AccessKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Logout(ctx context.Context, in *Empty, opts ...client.CallOption) (*LogoutResponse, error) {
	req := c.c.NewRequest(c.name, "User.Logout", in)
	out := new(LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	Register(context.Context, *RegisterRequest, *Empty) error
	GetVerifier(context.Context, *VerifierRequest, *VerifierResponse) error
	RegisterDevice(context.Context, *Empty, *RegisterDeviceResponse) error
	GetAccessKey(context.Context, *Empty, *AccessKeyResponse) error
	Logout(context.Context, *Empty, *LogoutResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		Register(ctx context.Context, in *RegisterRequest, out *Empty) error
		GetVerifier(ctx context.Context, in *VerifierRequest, out *VerifierResponse) error
		RegisterDevice(ctx context.Context, in *Empty, out *RegisterDeviceResponse) error
		GetAccessKey(ctx context.Context, in *Empty, out *AccessKeyResponse) error
		Logout(ctx context.Context, in *Empty, out *LogoutResponse) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) Register(ctx context.Context, in *RegisterRequest, out *Empty) error {
	return h.UserHandler.Register(ctx, in, out)
}

func (h *userHandler) GetVerifier(ctx context.Context, in *VerifierRequest, out *VerifierResponse) error {
	return h.UserHandler.GetVerifier(ctx, in, out)
}

func (h *userHandler) RegisterDevice(ctx context.Context, in *Empty, out *RegisterDeviceResponse) error {
	return h.UserHandler.RegisterDevice(ctx, in, out)
}

func (h *userHandler) GetAccessKey(ctx context.Context, in *Empty, out *AccessKeyResponse) error {
	return h.UserHandler.GetAccessKey(ctx, in, out)
}

func (h *userHandler) Logout(ctx context.Context, in *Empty, out *LogoutResponse) error {
	return h.UserHandler.Logout(ctx, in, out)
}
