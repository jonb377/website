// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/storage/storage.proto

package go_micro_api_storage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Storage service

type StorageService interface {
	Rename(ctx context.Context, in *RenameRequest, opts ...client.CallOption) (*Empty, error)
	SaveBlob(ctx context.Context, in *Blob, opts ...client.CallOption) (*Empty, error)
	DeleteBlob(ctx context.Context, in *Blob, opts ...client.CallOption) (*Empty, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...client.CallOption) (*SyncResponse, error)
}

type storageService struct {
	c    client.Client
	name string
}

func NewStorageService(name string, c client.Client) StorageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.api.storage"
	}
	return &storageService{
		c:    c,
		name: name,
	}
}

func (c *storageService) Rename(ctx context.Context, in *RenameRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Storage.Rename", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) SaveBlob(ctx context.Context, in *Blob, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Storage.SaveBlob", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) DeleteBlob(ctx context.Context, in *Blob, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Storage.DeleteBlob", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageService) Sync(ctx context.Context, in *SyncRequest, opts ...client.CallOption) (*SyncResponse, error) {
	req := c.c.NewRequest(c.name, "Storage.Sync", in)
	out := new(SyncResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Storage service

type StorageHandler interface {
	Rename(context.Context, *RenameRequest, *Empty) error
	SaveBlob(context.Context, *Blob, *Empty) error
	DeleteBlob(context.Context, *Blob, *Empty) error
	Sync(context.Context, *SyncRequest, *SyncResponse) error
}

func RegisterStorageHandler(s server.Server, hdlr StorageHandler, opts ...server.HandlerOption) error {
	type storage interface {
		Rename(ctx context.Context, in *RenameRequest, out *Empty) error
		SaveBlob(ctx context.Context, in *Blob, out *Empty) error
		DeleteBlob(ctx context.Context, in *Blob, out *Empty) error
		Sync(ctx context.Context, in *SyncRequest, out *SyncResponse) error
	}
	type Storage struct {
		storage
	}
	h := &storageHandler{hdlr}
	return s.Handle(s.NewHandler(&Storage{h}, opts...))
}

type storageHandler struct {
	StorageHandler
}

func (h *storageHandler) Rename(ctx context.Context, in *RenameRequest, out *Empty) error {
	return h.StorageHandler.Rename(ctx, in, out)
}

func (h *storageHandler) SaveBlob(ctx context.Context, in *Blob, out *Empty) error {
	return h.StorageHandler.SaveBlob(ctx, in, out)
}

func (h *storageHandler) DeleteBlob(ctx context.Context, in *Blob, out *Empty) error {
	return h.StorageHandler.DeleteBlob(ctx, in, out)
}

func (h *storageHandler) Sync(ctx context.Context, in *SyncRequest, out *SyncResponse) error {
	return h.StorageHandler.Sync(ctx, in, out)
}
