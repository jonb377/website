// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/password-manager/password-manager.proto

package go_micro_api_password_manager

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for PasswordManager service

type PasswordManagerService interface {
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...client.CallOption) (*Empty, error)
	ListPasswords(ctx context.Context, in *ListPasswordRequest, opts ...client.CallOption) (*ListPasswordResponse, error)
}

type passwordManagerService struct {
	c    client.Client
	name string
}

func NewPasswordManagerService(name string, c client.Client) PasswordManagerService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.api.password_manager"
	}
	return &passwordManagerService{
		c:    c,
		name: name,
	}
}

func (c *passwordManagerService) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "PasswordManager.UpdatePassword", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordManagerService) ListPasswords(ctx context.Context, in *ListPasswordRequest, opts ...client.CallOption) (*ListPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "PasswordManager.ListPasswords", in)
	out := new(ListPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PasswordManager service

type PasswordManagerHandler interface {
	UpdatePassword(context.Context, *UpdatePasswordRequest, *Empty) error
	ListPasswords(context.Context, *ListPasswordRequest, *ListPasswordResponse) error
}

func RegisterPasswordManagerHandler(s server.Server, hdlr PasswordManagerHandler, opts ...server.HandlerOption) error {
	type passwordManager interface {
		UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, out *Empty) error
		ListPasswords(ctx context.Context, in *ListPasswordRequest, out *ListPasswordResponse) error
	}
	type PasswordManager struct {
		passwordManager
	}
	h := &passwordManagerHandler{hdlr}
	return s.Handle(s.NewHandler(&PasswordManager{h}, opts...))
}

type passwordManagerHandler struct {
	PasswordManagerHandler
}

func (h *passwordManagerHandler) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, out *Empty) error {
	return h.PasswordManagerHandler.UpdatePassword(ctx, in, out)
}

func (h *passwordManagerHandler) ListPasswords(ctx context.Context, in *ListPasswordRequest, out *ListPasswordResponse) error {
	return h.PasswordManagerHandler.ListPasswords(ctx, in, out)
}
