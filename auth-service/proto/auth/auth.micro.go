// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/auth/auth.proto

package go_micro_api_auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthService service

type AuthService interface {
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...client.CallOption) (*CreateConnectionResponse, error)
	ConnectionChallenge(ctx context.Context, in *ConnectionChallengeRequest, opts ...client.CallOption) (*ConnectionChallengeResponse, error)
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...client.CallOption) (*ValidateTokenResponse, error)
	CloseConnection(ctx context.Context, in *CloseConnectionRequest, opts ...client.CallOption) (*Empty, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.api.auth"
	}
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...client.CallOption) (*CreateConnectionResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CreateConnection", in)
	out := new(CreateConnectionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ConnectionChallenge(ctx context.Context, in *ConnectionChallengeRequest, opts ...client.CallOption) (*ConnectionChallengeResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ConnectionChallenge", in)
	out := new(ConnectionChallengeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...client.CallOption) (*ValidateTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ValidateToken", in)
	out := new(ValidateTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CloseConnection(ctx context.Context, in *CloseConnectionRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "AuthService.CloseConnection", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	CreateConnection(context.Context, *CreateConnectionRequest, *CreateConnectionResponse) error
	ConnectionChallenge(context.Context, *ConnectionChallengeRequest, *ConnectionChallengeResponse) error
	ValidateToken(context.Context, *ValidateTokenRequest, *ValidateTokenResponse) error
	CloseConnection(context.Context, *CloseConnectionRequest, *Empty) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		CreateConnection(ctx context.Context, in *CreateConnectionRequest, out *CreateConnectionResponse) error
		ConnectionChallenge(ctx context.Context, in *ConnectionChallengeRequest, out *ConnectionChallengeResponse) error
		ValidateToken(ctx context.Context, in *ValidateTokenRequest, out *ValidateTokenResponse) error
		CloseConnection(ctx context.Context, in *CloseConnectionRequest, out *Empty) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) CreateConnection(ctx context.Context, in *CreateConnectionRequest, out *CreateConnectionResponse) error {
	return h.AuthServiceHandler.CreateConnection(ctx, in, out)
}

func (h *authServiceHandler) ConnectionChallenge(ctx context.Context, in *ConnectionChallengeRequest, out *ConnectionChallengeResponse) error {
	return h.AuthServiceHandler.ConnectionChallenge(ctx, in, out)
}

func (h *authServiceHandler) ValidateToken(ctx context.Context, in *ValidateTokenRequest, out *ValidateTokenResponse) error {
	return h.AuthServiceHandler.ValidateToken(ctx, in, out)
}

func (h *authServiceHandler) CloseConnection(ctx context.Context, in *CloseConnectionRequest, out *Empty) error {
	return h.AuthServiceHandler.CloseConnection(ctx, in, out)
}
